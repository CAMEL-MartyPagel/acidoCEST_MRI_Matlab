# 1 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
;**************************************************************** ;
; Copyright (c) 2000 - 2003
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
;*****************************************
; 23.04.2002  unified, freq_lists for 180,
; slice loop after segm loop
; with add. delay (d6) before  next inv. pulse  
;*****************************************
;
; d0 - TR padding
; d1 - T1 padding
; d2 - T2 padding
; d3 = PVM_GradDelayTime
; d4 = PVM_RampTime
; d6 = used for Inv_Rep_time 
; d8 = SCON / BLKTR_MAN (Amplifier preblanking)
; d20 = FID_delay
; d21 = ECHO_delay

define list<frequency> o1list = {$ACQ_O1_list}
define list<frequency> o2list = {$ACQ_O2_list}
define list<frequency> o3list = {$ACQ_O3_list}
define list<frequency> onres  = {0.0}
define list<power> PwL = { Watt $PrepPowerList}

;new convention:
;d4 = PVM_RiseTime
# 33 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
define delay dur20
"dur20 = d20 - de"

define delay dur1
"dur1 =d1 - 10u"

define delay d1x
"d1x = d1 - 25u"
# 42 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
define delay d9x
"d9x = d9 - 20u"

# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/MRI.include" 1
;****************************************************************
;
; $Source: /pv/CvsTree/pv/gen/src/prg/methManag/PPG/Attic/MRI.include,v $
;
; Copyright (c) 2006
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
;;****************************************************************
;MRI.include

# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/Avance.incl" 1
;Avance3aqs.incl
;   for AV III with AQS IPSO
;
;avance-version (13/06/17)
;
;$CLASS=HighRes Incl
;$COMMENT=
# 170 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/Avance.incl"
;$Id: Avance3aqs.incl,v 1.1.6.3 2015/03/05 16:37:14 uhei Exp $
# 14 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/MRI.include" 2

define delay aqq
define delay deparx
define delay derxadc
define delay rdepa

# 21 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/MRI.include"
"aqq=dw*td"
"rdepa=de-depa"
"deparx=depa-derx"
"derxadc=derx-deadc"


; contents of De2.incl - usage for different hardware versions to 
; be checked - intermediate solution to support Jobs
define delay rde1
# 31 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/MRI.include"
"rde1=de-de1"


# 44 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/MRI.include"
; end of contents of De2.incl


# 65 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/MRI.include"
	
	


# 74 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/MRI.include"
	


# 128 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/MRI.include"
# 129 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/MRI.include"
   


# 141 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/MRI.include"
	


# 45 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg" 2

# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 1
;****************************************************************
;
; Copyright (c) 2003-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: PrepModulesHead.mod,v 1.19 2012/01/20 10:19:48 wemch Exp $
;
; All Rights Reserved
;
; Declaration of pulseprogram parameters and subroutines for 
; preparation  modules
;
; Must be included after MRI.include!
;
;****************************************************************

;**** Fat Suppression ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/FatSupDef.mod" 1
;****************************************************************
;
; Copyright (c) 2002-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: FatSupDef.mod,v 1.7 2013/07/05 14:15:26 sako Exp $
;
; All Rights Reserved
;
; FatSupDef.mod : Declaration of Fat Suppression Subroutine
;
;****************************************************************

if (PVM_FatSupPerform == Yes)
{
  define pulse           fatSupPul   = {$PVM_FatSupRfLength}
  define list<frequency> fatSupList  = {$PVM_FatSupFL}
  
  define delay fatSupRamp  = {$PVM_FatSupRampTime}
  define delay fatSupAmp   = {$PVM_FatSupAmpEnable}
  define delay fatSupGrad  = {$PVM_FatSupGradWait}
  define delay fatSupSpoil = {$PVM_FatSupSpoilDur}

  ; convert from ms to s
  "fatSupRamp  = fatSupRamp  / 1000"
  "fatSupAmp   = fatSupAmp   / 1000"
  "fatSupGrad  = fatSupGrad  / 1000"
  "fatSupSpoil = fatSupSpoil / 1000"
}
subroutine FatSup
# 20 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Flow Saturation ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/FlowSatDef.mod" 1
;****************************************************************
;
; Copyright (c) 2005-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: FlowSatDef.mod,v 1.7 2013/06/04 10:11:30 sako Exp $
;
; All Rights Reserved
;
; FlowSatDef.mod: Declaration of subroutines for Flow Saturation 
; call
; subr FlowSat()
; subr FlowSatInit()
; subr FlowSatInc()
; 
;****************************************************************

if(PVM_InFlowSatOnOff == 1)
{
define list<frequency> modlis4 = {$PVM_InFlowSatFL}
define list<grad_scalar> flowSatGrad={$PVM_InFlowSatGrad}
define delay SfD0 = {$PVM_SfD0}
define delay SfD1 = {$PVM_SfD1}
define delay SfD2 = {$PVM_SfD2}

define pulse SfP0 = {$PVM_SfP0}
define loopcounter SfLp0 = {$PVM_SfLp0}
}
subroutine FlowSat
subroutine FlowSatInc
subroutine FlowSatInit
# 24 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Inversion Pulse ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/InvPulseDef.mod" 1
;****************************************************************
;
; Copyright (c) 2002-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: InvPulseDef.mod,v 1.2 2010/12/15 10:52:31 mah Exp $
;
; All Rights Reserved
;
; InvPulseDef.mod : Declaration of Inversion Pulse subroutine
;
; call
; subr InvPulse()
;
;****************************************************************
;   
;       PVM_InvRFPulseArr      :  
;     
;       sp22            TPQQ[14].name : PVM_InvRFPulsePropertyArr[0].Filename
;
;       PVM_IpP0                      :  PVM_InvRFPulseArr[0].PulseLength
;
;       PVM_IpD2                      :  PVM_InvPulseDelay[0]
;       PVM_IpD3                      :  PVM_InvPulseSpoilTime[0]
;       PVM_IpD1                      :  CONFIG_amplifier _enable
;       PVM_IpD0                      :  PVM_RampTime
;

if(PVM_InvPulseOnOff == 1)
{
define list<frequency>  modlis2= {$PVM_InvPulseOffsetHz}
define delay IpD0 = {$PVM_IpD0}
define delay IpD1 = {$PVM_IpD1}
define delay IpD2 = {$PVM_IpD2}
define delay IpD3 = {$PVM_IpD3}

define pulse IpP0 = {$PVM_IpP0}
}
subroutine InvPulse
# 28 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Magnetisation Transfer ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/MagTransDef.mod" 1
;****************************************************************
; $Source: /pv/CvsTree/pv/gen/src/prg/methManag/PPG/Attic/MagTransDef.mod,v $
;
; Copyright (c) 2005-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
; MagTransDef.mod: Declaration of subroutine for Magnetization 
;                  transfer 
; call
; subr MagTrans()
;
; $Id: MagTransDef.mod,v 1.6.2.1 2015/03/24 14:30:00 sako Exp $
;****************************************************************
;**** Magnetisation Transfer Module ****


if(PVM_MagTransOnOff)
{
define list<frequency> modlis3 = {$PVM_MagTransFL} 
define delay MtD0 = {$PVM_MtD0}
define delay MtD1 = {$PVM_MtD1}
define delay MtD2 = {$PVM_MtD2}
define delay MtD3 = {$PVM_MtD3}
# 28 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/MagTransDef.mod"
define pulse MtP0 = {$PVM_MtP0}

define loopcounter MtLp0 = {$PVM_MtLp0}
}

subroutine MagTrans
# 32 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Saturation Pulse ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/SatPulseDef.mod" 1
;****************************************************************
;
; Copyright (c) 2002-2003
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: SatPulseDef.mod,v 1.3 2010/12/15 10:52:31 mah Exp $
;
; All Rights Reserved
;
; SatPulseDef.mod : Declaration of Saturation Pulse subroutines
; call 
; subr SatPulse()
;
;****************************************************************
;   
;    PVM_SatRFPulseArr      :  
;     
;       sp28            DPQQ[12].name : PVM_SatRFPulsePropertyArr[0].Filename
;       sp29            DPQQ[13].name : PVM_SatRFPulsePropertyArr[1].Filename
;       sp30            DPQQ[14].name : PVM_SatRFPulsePropertyArr[2].Filename
;       sp31            DPQQ[15].name : PVM_SatRFPulsePropertyArr[3].Filename
;
;       PVM_SpP0                     :  PVM_SatRFPulseArr[0].PulseLength
;       PVM_SpP1                     :  PVM_SatRFPulseArr[1].PulseLength
;       PVM_SpP2                     :  PVM_SatRFPulseArr[2].PulseLength
;       PVM_SpP3                     :  PVM_SatRFPulseArr[3].PulseLength
;
;       PVM_SpD2                     :  PVM_SatPulseDelay1[0]
;       PVM_SpD6                     :  PVM_SatPulseSpoilTime[0]
;       PVM_SpD10                    :  PVM_SatPulseDelay2[0]
;       PVM_SpD3                     :  PVM_SatPulseSpoilTime[1]
;       PVM_SpD7                     :  PVM_SatPulseDelay1[1]
;       PVM_SpD11                    :  PVM_SatPulseDelay2[1]
;       PVM_SpD4                     :  PVM_SatPulseDelay1[2]
;       PVM_SpD8                     :  PVM_SatPulseSpoilTime[2]
;       PVM_SpD12                    :  PVM_SatPulseDelay2[2]
;       PVM_SpD5                     :  PVM_SatPulseDelay1[3]
;       PVM_SpD9                     :  PVM_SatPulseSpoilTime[3]
;       PVM_SpD13                    :  PVM_SatPulseDelay2[3]
;

if(PVM_SatPulseOnOff == 1)
   {
define list<frequency> modlis7 = {$PVM_SatPulseOffsetHz}

define delay SpD0 = {$PVM_SpD0}
define delay SpD1 = {$PVM_SpD1}
define delay SpD2 = {$PVM_SpD2}
define delay SpD3 = {$PVM_SpD3}
define delay SpD4 = {$PVM_SpD4}
define delay SpD5 = {$PVM_SpD5}
define delay SpD6 = {$PVM_SpD6}
define delay SpD7 = {$PVM_SpD7}
define delay SpD8 = {$PVM_SpD8}
define delay SpD9 = {$PVM_SpD9}
define delay SpD10 = {$PVM_SpD10}
define delay SpD11 = {$PVM_SpD11}
define delay SpD12 = {$PVM_SpD12}
define delay SpD13 = {$PVM_SpD13}
define pulse SpP0 = {$PVM_SpP0}
define pulse SpP1 = {$PVM_SpP1}
define pulse SpP2 = {$PVM_SpP2}
define pulse SpP3 = {$PVM_SpP3}
# 66 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/SatPulseDef.mod"
   }


subroutine SatPulse
# 36 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;*** FOV Saturation ***
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/FovSatDef.mod" 1
;****************************************************************
;
; Copyright (c) 2002-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: FovSatDef.mod,v 1.8 2013/08/06 08:09:43 sako Exp $
;
; All Rights Reserved
;
; FovSat.mod : Declaration of FOV Saturation subroutine
; call: subr FovSat()
;
;****************************************************************


if (PVM_FovSatOnOff == On)
{
  define pulse           fovSatPul   = {$PVM_FovSatRfLength}
  define list<frequency> fovSatList  = {$PVM_FovSatFL}
  
  define delay fovSatRamp  = {$PVM_FovSatRampTime}
  define delay fovSatAmp   = {$PVM_FovSatAmpEnable}
  define delay fovSatGrad  = {$PVM_FovSatGradWait}
  define delay fovSatSpoil = {$PVM_FovSatSpoilDur}
# 27 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/FovSatDef.mod"
  ; convert from ms to s
  "fovSatRamp  = fovSatRamp  / 1000"
  "fovSatAmp   = fovSatAmp   / 1000"
  "fovSatGrad  = fovSatGrad  / 1000"
  "fovSatSpoil = fovSatSpoil / 1000"  
}

subroutine FovSat

# 53 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/FovSatDef.mod"
; backwards compatibility
subroutine SatSlices


# 40 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Black Blood ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/BlBloodDef.mod" 1
;****************************************************************
;
; Copyright (c) 2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: BlBloodDef.mod,v 1.4 2013/06/04 10:11:30 sako Exp $
;
; All Rights Reserved
;
; BlBloodDef.mod : Declaration of Black blood  subroutine
;
; call
; subr BlBlood(ph0) : Black blood preparation with RF phaselist
;                     ph0
;
;****************************************************************

if(PVM_BlBloodOnOff)
{
define list<frequency> modlis8 = {$PVM_BlBloodFL}
define delay BlbD0 = {$PVM_BlbD0}
define delay BlbD1 = {$PVM_BlbD1}
define delay BlbD2 = {$PVM_BlbD2}
define delay BlbD3 = {$PVM_BlbD3}

define pulse BlbP0 = {$PVM_BlbP0}
}
subroutine BlBlood
# 44 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Trigger ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/TriggerDef.mod" 1
;****************************************************************
;
; Copyright (c) 1998-2003
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
; TriggerDef.mod - Trigger Module
;
;****************************************************************

if (PVM_TriggerModule == On)
{
  define delay trigDur = {$PVM_TriggerDur}
  define delay trigDel = {$PVM_TriggerDelay}

  ; convert from ms to s
  "trigDur = trigDur / 1000"
  "trigDel = trigDel / 1000"
}
subroutine Trigger
subroutine TriggerPhase
subroutine TriggerSlice
# 48 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Trigger Out ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/TriggerOutDef.mod" 1
;****************************************************************
;
; Copyright (c) 2003
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
; $Id: TriggerOutDef.mod,v 1.2 2013/07/05 14:15:26 sako Exp $
;****************************************************************

if (PVM_TriggerOutOnOff == On)
{
  define delay trigOutDur = {$PVM_TriggerOutDur}
  define delay trigOutDel = {$PVM_TriggerOutDelay}

  ; convert from ms to s
  "trigOutDur = trigOutDur / 1000"
  "trigOutDel = trigOutDel / 1000"
}
subroutine TriggerOut
subroutine TriggerOutStart
subroutine TriggerOutSlice
subroutine TriggerOutVolume
# 52 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Outer Volume Suppression ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/WsOvsDef.mod" 1
;****************************************************************
;
; Copyright (c) 2005-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: WsOvsDef.mod,v 1.6 2013/07/08 08:33:32 josh Exp $
;
; All Rights Reserved
;
; WsOvsDef.mod: Declaration of water suppression and Outer 
;               volume suppression subroutines
;
; call 
; subr Ovs(ph0) ;  execution of OVS with ph0 phaselist
;
; subr WsOvs(ph0,ph1) : execution of OVS with ph0 and WS with ph1
;                       phaselist
;****************************************************************

;**** OuterVolumeSuppression ****

if(PVM_OvsOnOff == 1)
{
define list<frequency> Ovslist={$PVM_OvsFrequencyList}
define delay OvsD0 = {$PVM_OvsD0}
define delay OvsD1 = {$PVM_OvsD1}
define pulse OvsP0 = {$PVM_OvsP0}
}
subroutine Ovs
# 59 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/WsOvsDef.mod"
;*** WaterSuppression Module with OVS ****

if (PVM_WsMode)
{

define list<frequency> Wslist={$PVM_WsOffsetHz}
define pulse WsP0 = {$PVM_WsP0}
define pulse WsP1 = {$PVM_WsP1}
define pulse WsP2 = {$PVM_WsP2}
define delay WsNp0 
"WsNp0 = WsP0"
define delay WsNp1 
"WsNp1 = WsP1"
define delay WsNp2 
"WsNp2 = WsP2"
define list<delay> ChD1={$PVM_ChppgD1}
define list<delay> ChD2={$PVM_ChppgD2}
define list<delay> VpD1={$PVM_VpppgD1}
define list<delay> VpD2={$PVM_VpppgD2}
# 79 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/WsOvsDef.mod"
}


subroutine WsOvsMain
subroutine WsOvs
subroutine Ws
# 56 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Solvent Suppression module ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/WsSatDef.mod" 1
;******************************************************************
;
; Copyright (c) 2002-2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: WsSatDef.mod,v 1.11 2013/08/23 08:37:06 josh Exp $ 
;
; All Rights Reserved
;
; WsSatDef.mod - Declaration of water suppression and FOV saturation 
;                subroutines
; call
; subr WsSat(ph0) : execution of WS with ph0 phaselist and 
;                   FOV saturation (as passed as argument)    
;      
;*******************************************************************


; Definitions for WsPpgParams are included in WsOvsDef.mod
subroutine WsSatMain
subroutine WsSat
# 60 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Selective Inversion Recovery ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/SelSliceIrDef.mod" 1
;****************************************************************
;
; Copyright (c) 2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: SelSliceIrDef.mod,v 1.5 2013/06/04 10:11:30 sako Exp $
;
; All Rights Reserved
;
; SelSliceIrDef.mod : declaration of slice Selective Inversion 
;                     Recovery subroutine
; call SliceSelIr()
; 
;
;****************************************************************


if(PVM_SelIrOnOff)
{
  define list<frequency> IrFL = {$PVM_SelIrFL} 
  define delay IrD0 = {$PVM_SelIrD0}
  define delay IrD1 = {$PVM_SelIrD1}
  define delay IrD2 = {$PVM_SelIrD2}
  define delay IrD3 = {$PVM_SelIrD3}
  define delay IrD4 = {$PVM_SelIrD4}
# 28 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/SelSliceIrDef.mod"
  define pulse IrP0 = {$PVM_SelIrP0}
  define loopcounter IrL0 = {$PVM_SelIrL0}
}

subroutine SliceSelIr

# 64 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Tagging ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/TagDef.mod" 1
;****************************************************************
;
; Copyright (c) 2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: TagDef.mod,v 1.6 2013/06/05 12:55:35 sako Exp $
;
; All Rights Reserved
;
; TagDef.mod : Declaration of tagging subroutine
; call
; subr Tagging()
;
;****************************************************************

if(PVM_TaggingOnOff)
{
define list<frequency> taggfreq={$PVM_TaggingFL}

define delay TaggD0 = {$PVM_TaggingD0}
define delay TaggD1 = {$PVM_TaggingD1}
define delay TaggD2 = {$PVM_TaggingD2}
define delay TaggD3 = {$PVM_TaggingD3}
define delay TaggD4 = {$PVM_TaggingD4}
define delay TaggD5 = {$PVM_TaggingD5}
# 28 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/TagDef.mod"
define pulse TaggP0 = {$PVM_TaggingP0}
define loopcounter TaggL0 = {$PVM_TaggingLp0}
}

subroutine Tagging

# 68 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Noe ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/NoeDef.mod" 1
;****************************************************************
;
; Copyright (c) 2007
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; $Id: NoeDef.mod,v 1.1 2007/07/02 14:26:00 mawi Exp $
;
; All Rights Reserved
;
; NoeDef.mod: Declaration of Nuclear Overhouser Enhancement 
;             subroutine
; call
; subr Noe()
;
;****************************************************************

if(PVM_NoeOnOff == On)
{
define delay NoeD0 = {$PVM_NoeD0}
define delay NoeD1 = {$PVM_NoeD1}
}

subroutine Noe
# 72 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


;**** Evolution ****
# 1 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/EvolutionDef.mod" 1
;****************************************************************
;
; Copyright (c) 1998-2003
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
; EvolutionDef.mod - Evolution Module
;
;****************************************************************

if (PVM_EvolutionOnOff == On)
{
  define delay       evolDel  = {$PVM_EvolutionDelay}
  define list<delay> evolTime = {$PVM_EvolutionTime}
}

subroutine Evolution
# 76 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/PrepModulesHead.mod" 2


# 46 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg" 2
# 47 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
preset off

;-----start of addition for CEST MRI---mpagel
     if (PVM_MagTransOnOff )
  {
     define list <frequency> cestof = {$PVM_ppgFreqList1}
  }

;-----end of addition for CEST MRI---mpagel
# 57 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
dccorr                                             \n                           \n if (CONFIG_preemp_type == GREAT_60)               \n {                                                 \n if (CONFIG_instrument_type != Avance_III)      \n {                                              \n 500m setnmr0|34|33|32                          \n }                                              \n else                                           \n {                                              \n 200u setnmr0|34|33|32                          \n }                                              \n }                                                 \n if (CONFIG_preemp_type == DPP_with_SW_Blanking)   \n {\n 10u ctrlgrad 0  \n 10u grad{(0)|(0)|(0) }	  \n 200u setnmr0|34|33|32     \n }\n if (CONFIG_preemp_type == DPP)  \n {    \n 10u groff \n }


# 62 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
grad_zero_for_gs <ACQ_spatial_phase_1, ACQ_spatial_phase_2>


start,  d4    
segm,   ACQ_spatial_phase_1.store
;---next line is commented out because the trigger is added to CEST routine
;---subr TriggerPhase()
slice,  10u   fq8(receive):f1
        5u PwL.res
        10u   
;----------------------- Trigger----------------	
;---next line is commented out because the trigger is added to CEST routine
;---subr TriggerSlice()
# 76 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
;----------------------end of Trigger --------------	

;---start of CEST saturation, added by mpagel---
 if(PVM_MagTransOnOff)
  {
     ;---d5 is a delay before the saturation period---mpagel
     d5 gatepulse 1
      MtD1 
mtc,MtD2 cestof:f1 gatepulse 1
      MtP0:sp43:f1 
      lo to mtc times MtLp0
      if (PVM_TriggerModule == 1)
      {
        5u 
           startgate, 5u
           MtP0:sp43:f1
          30u
          if trignl1 goto endgate
          goto startgate
      
          endgate, 5u  trigpl1
          5u trigpe3
      }

      MtD3  		grad_ramp{0, 0, PVM_MagTransSpoiler}
      MtD0       	groff
      30u
  }
;---end of CEST saturation, added by mpagel---
# 106 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
;--------------------------Inversion----------------
if(FISP_inversion_enable == Yes)
{
inv,     d4   onres:f1                  ;on resonance 
  	 d8   gatepulse 1
         (p4:sp4 ph4):f1                ;inversion pulse
         d16                            ;inversion time  
}
;-----------------------end of Inversion-----------

;--- spoiler before each slice, and setting the slice grad for the alpha/2
        d10   grad_ramp{0, 0, g12}	
        d4    grad_ramp{0, 0, g0} o1list:f1
;---alpha/2 -----
if(Ssfp_preparation == Alpha_2)
{	
alpha2, 10u
	(p0:sp3 	 ph3):f1
	10u
        d4    grad_ramp{0, 0, g11}
        10u   o3list:f1
        d9x
        10u   o1list:f1       
        d4    grad_ramp{0, 0, g0}   gatepulse 1	
}		     
;---end of alpha/2 -----
;-- initial dummy echoes -----------------------
if(L[6] != 0)
{
init1,  10u
	(p0:sp0 	 ph0):f1
	10u			     
        5u    grad_ramp{g2, 0, g1}  
        10u   o2list:f1       ;phase advance - start
	d1x                   ;
	10u   o1list:f1       ;phase advance - end	
	d4    grad_ramp{g5, 0, 0} 
        d20   ph1 
        aqq     
        d21  
if(RFSpoilerOnOff == On)
{    
        d1    grad_ramp{g9, 0, g10}  o2list.inc
}
else
{
        d1    grad_ramp{g9, 0, g10}
}
        d4    grad_ramp{0, 0, g0}  gatepulse 1
        lo to init1 times l6
}

;--- end of alpha/2 and dummy echoes ------------
;--- Starter Sequence  --------------------------
if(Ssfp_preparation == Starter_Sequence)
{
;--  Preparation for Mz   -----------------------	
alpha,  10u
	(p0:sp5 	 ph5):f1
	10u			     
        5u    grad_ramp{0, 0, g1}  
 
        10u     o2list:f1       ;phase advance - start
	d1x                     ; 
	10u	o1list:f1       ;phase advance - end
	d4    grad_ramp{0, 0, 0} 
        d20   ph1 
        aqq     
        d21 
        d1    grad_ramp{0, 0, g10}
        d4    grad_ramp{0, 0, g0}  gatepulse 1
        10u
	(p0:sp6 	 ph6):f1
	10u		     
        d11   grad_ramp{g6,0, g6}
        d4    grad_ramp{0, 0, g0} PwL:f1  gatepulse 1
# 183 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
;--  Preparation for Mxy   -----------------------
if(L[7] != 0)
{
init2,  10u
	(p0:sp1(currentpower) 	 ph0):f1
	10u			     
        5u    grad_ramp{g2, 0, g1}  
 
        10u      o2list:f1      ;phase advance - start
	d1x                     ; 
	10u	 o1list:f1      ;phase advance - end
	d4    grad_ramp{g5, 0, 0} 
        d20   ph1 
        aqq     
        d21   PwL.inc
if(RFSpoilerOnOff == On)
{    
        d1    grad_ramp{g9, 0, g10}  o2list.inc
}
else
{
        d1    grad_ramp{g9, 0, g10}
}
        d4    grad_ramp{0, 0, g0} PwL:f1  gatepulse 1
        lo to init2 times l7
}
}
; ---- End of Starter Sequence ---------------	

;----------------- movie loop-----------------
movie,  ACQ_spatial_phase_1.restore
;------------------- ssfp loops --------------
ssfp,   10u
	(p0:sp0  ph0):f1                   	
	10u					;compensation
if(RFSpoilerOnOff == On)
{       
        d1      grad_ramp{g2, ACQ_spatial_phase_1*g3, g1+ACQ_spatial_phase_2*g4}
}
else
{
        5u      grad_ramp{g2, ACQ_spatial_phase_1*g3, g1+ACQ_spatial_phase_2*g4}

        10u     o2list:f1       ;phase advance - start
	d1x                     ; 
	10u	o1list:f1       ;phase advance - end
}
 
;-------------------------frequency encoding---------------
	d4 	grad_ramp{g5, 0, 0} o1list:f1
	dur20
        rdepa						 \n deparx     adc   syrec fqatofqb:f1 \n derxadc    ph1:r  			 \n deadc      
	aqq	cpdngs17:f1
	d21	
;------------------------spoiler + phase rewinding -------
if(RFSpoilerOnOff == On)
{
        10u eoscnp
        5u      grad_ramp{g9, ACQ_spatial_phase_1*g7, g10+ACQ_spatial_phase_2*g8}
        10u     o2list:f1       ;phase advance - start
	d1x         
        5u	o1list:f1       
	5u      o2list.inc  
}
else
{
        dur1   	grad_ramp{g9, ACQ_spatial_phase_1*g7, g10+ACQ_spatial_phase_2*g8}  
	10u eoscnp
}
	d4      grad_ramp{0, 0, g0}    gatepulse 1 
# 254 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
;------------------------2d loops--------------------------
	ACQ_spatial_phase_1.inc
if (l4 != 1)
{
	lo to ssfp times l4 ;   l4 = ACQ_phase_factor
}
;------------------end of ssfp loops ----------------------


;----------------------ssdum loops--------------------------
# 265 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
if(SeparationEchoes > 0)
{
        ACQ_spatial_phase_1.dec

ssdum,  10u
        (p0:sp0  ph0):f1
        10u
        5u      grad_ramp{g2, ACQ_spatial_phase_1*g3, g1+ACQ_spatial_phase_2*g4}	
        10u     o2list:f1       ;phase advance - start
	d1x
	10u	o1list:f1       ;phase advance - end
        d4      grad_ramp{g5, 0, 0} 
        d20     ph1
        aqq     
        d21   
if(RFSpoilerOnOff == On)
{
        d1      grad_ramp{g9, ACQ_spatial_phase_1*g7, g10+ACQ_spatial_phase_2*g8}  o2list.inc
 }
else
{
        d1      grad_ramp{g9, ACQ_spatial_phase_1*g7, g10+ACQ_spatial_phase_2*g8}
} 
        d4      grad_ramp{0, 0, g0}  gatepulse 1

        lo to ssdum times l1	;  l1 fraction of ACQ_phase_factor 
        5u
        ACQ_spatial_phase_1.inc
}
;-----------------------end of ssdum loop----------------------
# 296 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
        lo to movie times l3 	;  l3 = number of frames (movie loop)
;-----------------------end of movie loop----------------------
if(KeepSteadyState3D==Yes)
{
	ACQ_spatial_phase_2.inc
	lo to ssfp times l5	;  l5 = ACQ_size[2]
}
;--------------------end of steady state 3D loop----------------
	grad_matrix.inc
        3u  o1list.inc  o3list.inc
if(RFSpoilerOnOff == On)
{
       3u  o2list.res
}
else
{
        3u  o2list.inc  
}
        d4   grad_off		;  to prevent "grad ON" for a long time
        d6                      ;  add. delay controlled by Scan_RepetitionTime/Inv_Rep_time
        lo to slice times NSLICES 
;-----------------------end of slice loop--------------------
        10u
	lo to segm times l2	;  l2 = ACQ_size[1]/ACQ_phase_factor		


;-----------------------------3d loop---------------------------
if( ACQ_dim >= 3 )
{
if(KeepSteadyState3D==No)
{	ACQ_spatial_phase_2.inc
	lo to segm times l5	;  l5 = ACQ_size[2]
}
}
        lo to start times NAE   ;  NAE loop used for averaging experiments 
subr Evolution
;EXEC_begin Evolution Evolution()
# 19 "/opt/PV6.0.1/exp/stan/nmr/lists/pp/EvolutionDef.mod"
 
  if (PVM_EvolutionOnOff == On)
  {
    if (PVM_EvolutionMode == Variable_Delay)
    {
      evolTime
      evolTime.inc
    }
    else
    {
      evolDel
    }
  }
 
;EXEC_end   Evolution
# 331 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
# 333 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
;-----added for CEST MRI---mpagel
        5u
        if (PVM_MagTransOnOff )
        {
        2u cestof.inc
        }
;-----end of CEST MRI edit---mpagel

	lo to start times NR    ;  NR loop used for repetitions

	grad_matrix.res
# 345 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
        3u  o1list.res
        3u  o2list.res

if (ACQ_scan_type != Scan_Experiment) \n{ \n goto start \n}

exit
# 352 "/opt/PV6.0.1/prog/curdir/PagelLab/ParaVision/exp/lists/pp/cestFISP_Pagel5.ppg"
;fisp phase lists
ph0 = 0
ph1 = 0
ph3 = 0 
ph4 = 0
ph5 = 0
ph6 = 0


	
